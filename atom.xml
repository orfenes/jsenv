<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JS env - Ambiente dedicado a assuntos sobre Javascript]]></title>
  <link href="http://jsenv.com/atom.xml" rel="self"/>
  <link href="http://jsenv.com/"/>
  <updated>2015-03-15T03:48:51+00:00</updated>
  <id>http://jsenv.com/</id>
  <author>
    <name><![CDATA[JS env team]]></name>
    <email><![CDATA[team.jsenv@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Usando O Console Parte 1 - Console API]]></title>
    <link href="http://jsenv.com/blog/2015/03/08/usando-o-console-parte-1-console-api/"/>
    <updated>2015-03-08T03:41:33+00:00</updated>
    <id>http://jsenv.com/blog/2015/03/08/usando-o-console-parte-1-console-api</id>
    <content type="html"><![CDATA[<p><a href="https://developer.chrome.com/devtools/docs/console">Console</a> é uma ferramenta sagrada para Front-enders, usada para debugar, procurar por erros, gerar logs, fazer testes de performance, teste de asserção, entre outras coisas que nos ajudam a fazer análises a aplicação do lado do cliente.</p>

<p>Esse poste tem o objetivo de mostrar algumas dicas que vão facilitar suas análises e debug da aplicação especificamente para o <strong>Google Chrome.</strong></p>

<!--more-->


<p>O Chrome possui uma ferramenta muito poderosa chamada <a href="https://developer.chrome.com/devtools/docs/console">Console</a>, tal é composta por duas APIs, <a href="https://developer.chrome.com/devtools/docs/console">Console API</a> que será abordada neste poste e <a href="https://developer.chrome.com/devtools/docs/commandline-api">Comman Line API</a> que será abordada na parte dois do post.</p>

<p>Lembrando que os exemplos deste post foram feitos no <strong>Google Chrome,</strong> porém são similares em outros browsers (Safari, Firefox e Opera).</p>

<p><strong>Let&rsquo;s Rock</strong></p>

<h2>Abrindo o Console</h2>

<p>Para ter acesso ao Console use as teclas de atalho <strong>Ctrl + Shift + j</strong> no Windows/Linux ou <strong>Command + Option + j</strong> para Mac.</p>

<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/console.jpg" alt="Console" /></p>

<h3>Logando mensagens</h3>

<h4>Exibir mensagem - <em>console.log(object [, object, &hellip;])</em></h4>

<p>Provavelmente é o método mais utilizado da API, com ele podemos exibir mensagens no console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-mensagem.jpg" alt="Logando mensagens" /></p>

<p>Podemos usar curingas para concatenar com variáveis de forma elegante:</p>

<table>
<thead>
<tr>
<th> Curinga       </th>
<th style="text-align:center;"> Tipo          </th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>%s</strong>            </td>
<td style="text-align:center;"> string        </td>
</tr>
<tr>
<td> <strong>%d ou %i</strong>      </td>
<td style="text-align:center;"> integer       </td>
</tr>
<tr>
<td> <strong>%f</strong>            </td>
<td style="text-align:center;"> float         </td>
</tr>
<tr>
<td> <strong>%o</strong>            </td>
<td style="text-align:center;"> DOM Elements  </td>
</tr>
<tr>
<td> <strong>%O</strong>            </td>
<td style="text-align:center;"> Javascript object</td>
</tr>
<tr>
<td> <strong>%c</strong>            </td>
<td style="text-align:center;"> CSS style     </td>
</tr>
</tbody>
</table>


<p><strong>Concatenando com variáveis:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;valor de a: %i e valor de b: %i&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-concat-string.jpg" alt="Concatenando" /></p>

<p><strong>Concatenando com objetos:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">nome</span>  <span class="o">=</span> <span class="p">{</span> <span class="nx">nome</span><span class="o">:</span> <span class="s2">&quot;Geremias&quot;</span><span class="p">,</span> <span class="nx">cidade</span><span class="o">:</span><span class="s2">&quot;Jaraitinga&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">curso</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">nome</span><span class="o">:</span> <span class="s2">&quot;Administração&quot;</span><span class="p">,</span> <span class="nx">turma</span><span class="o">:</span> <span class="s2">&quot;A&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Nome: %O e curso: %O&quot;</span><span class="p">,</span> <span class="nx">nome</span><span class="p">,</span> <span class="nx">curso</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-objetos.jpg" alt="Logando objetos" /></p>

<p><strong>Estilizando as mensagens:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;%cHello %cworld&quot;</span><span class="p">,</span><span class="s2">&quot;color:red;font-size:x-large&quot;</span><span class="p">,</span><span class="s2">&quot;color:blue&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-estilizado.jpg" alt="Logando com estilo" /></p>

<h4>Exibir mensagens de alerta - <em>console.warn(object [, object, &hellip;])</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;E-mail inválido&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-warn.jpg" alt="Logando mensagem de warn" /></p>

<h4>Agrupando logs - <em>console.group(object [, object, &hellip;])</em>, <em>console.groupEnd()</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">group</span><span class="p">(</span><span class="s2">&quot;Logs de Usuários&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Usuário logado&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Usuário efetuo a compra com sucesso&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">groupEnd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">group</span><span class="p">(</span><span class="s2">&quot;Carrinho de compras&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Carrinho vazio&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Novo item adicionado ao carrinho&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">groupEnd</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-group.jpg" alt="Agrupando" /></p>

<h4>Agrupando com  groupCollapsed -  <em>console.groupCollapsed(object [, object, &hellip;])</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">groupCollapsed</span><span class="p">(</span><span class="s2">&quot;Logs de Usuários&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Usuário logado&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Usuário efetuo a compra com sucesso&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">groupEnd</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">groupCollapsed</span><span class="p">(</span><span class="s2">&quot;Carrinho de compras&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Carrinho vazio&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Novo item adicionado ao carrinho&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">groupEnd</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/log-group-groupCollapsed.gif" alt="Agrupando com collapsed" /></p>

<h3>Testes</h3>

<p>É possível usar o <strong>Console</strong> para efetuar alguns testes simples, como teste de asserção, tempo de execução e tracking.</p>

<h4>Testando uma condição - <em>console.assert(expression, object)</em></h4>

<p>Você pode usar o método <code>assert</code> para testar uma condição, caso ela seja falsa, será exibida a mensagem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span> <span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">,</span> <span class="s2">&quot;A não é maior que B&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-assert.jpg" alt="Testes com assert" /></p>

<h4>Contador - <em>console.count(label)</em></h4>

<p>Exibe a quantidade de vezes que a mesma <code>label</code> foi invocada.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">validaCampo</span> <span class="p">(</span><span class="nx">campo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">count</span><span class="p">(</span><span class="s1">&#39;Validando campo &#39;</span> <span class="o">+</span> <span class="nx">campo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">validaCampo</span><span class="p">(</span><span class="s1">&#39;phone&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">validaCampo</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/log-group-count.gif" alt="Count" /></p>

<h4>Calculando o tempo - <em>console.time(label) e console.timeEnd(label)</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10000</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s1">&#39;Tempo para contabilitar os usuários&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">users</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">users</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&quot;Tempo para contabilitar os usuários&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Contabilizando o tempo de execução de trechos de códigos, onde cada label está relacionada a um timer.</p>

<p><img src="http://jsenv.com/post_images_content/usando_o_console_parte_um/logando-timer.jpg" alt="Count" /></p>

<p>Console API possui vários métodos, tire um tempinho para ler a <a href="https://developer.chrome.com/devtools/docs/console-api">documentação completa</a>.</p>

<p>Safari, Firefox, Opera e Internet Explorer também possuem seu próprio Console, segue o link da documentação de cada um:</p>

<p><strong>Firefox</strong>: <a href="http://goo.gl/E3o0kK">http://goo.gl/E3o0kK</a> <br/>
<strong>Safari</strong>: <a href="http://goo.gl/07sSft">http://goo.gl/07sSft</a> <br/>
<strong>Opera</strong>: <a href="http://goo.gl/gaEtGr">http://goo.gl/gaEtGr</a> <br/>
<strong>Internet Explorer</strong>: <a href="http://goo.gl/uzPYZZ">http://goo.gl/uzPYZZ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membros Privados Em Javascript]]></title>
    <link href="http://jsenv.com/blog/2015/02/26/membros-privados-em-javascript/"/>
    <updated>2015-02-26T18:04:53+00:00</updated>
    <id>http://jsenv.com/blog/2015/02/26/membros-privados-em-javascript</id>
    <content type="html"><![CDATA[<p>Quem nunca se perguntou: <em>&ldquo;Como faço para deixar minhas variáveis e métodos privados com Javascript?&rdquo;</em>. Pois bem, tentarei de uma forma bem pragmática mostrar como fazemos isso.</p>

<p>Algumas pessoas acreditam que o Javascript não tem a capacidade de <em>&ldquo;esconder informações&rdquo;</em>, porque <code>object</code> não pode ter variáveis e métodos privados. Mas isso não passa de um mal-entendido.</p>

<h4><em>Sim! Objetos Javascript podem ter membros privados.</em></h4>

<p>Mas, antes de nos aprofundarmos vamos entender um pouco mais do funcionamento do Javascript em relação aos objetos:</p>

<!--more-->


<h2>Objects</h2>

<p>Javascript é fundamentalmente baseado em <em>objects</em>. Funções são objetos, arrays são objetos e Objetos são objetos. Mas o que são objetos?</p>

<p>Objetos são coleções de pares nome-valor. Os nomes são <em>strings</em> e o valores podem ser <em>strings</em>, <em>numbers</em>, <em>booleans</em> e <em>objects</em> (incluindo <em>arrays</em> e <em>funções</em>).</p>

<h2>Membros Públicos</h2>

<p>Os membros de um <code>object</code> são, sem exceção, públicos. Qualquer função pode acessar, modificar, deletar ou até mesmo adicionar novos membros. Existem duas maneiras principais de inserir membros em um novo objeto:</p>

<h3>No construtor</h3>

<p>Esta técnica é usualmente utilizada para iniciar instâncias de <em>variáveis</em> públicas. A variável <code>this</code> do construtor é usada para adicionar um membro ao objeto.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Adicionar</span> <span class="p">(</span> <span class="nx">param</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">=</span> <span class="nx">param</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Então, se construírmos um novo objeto</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">novo_objeto</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Adicionar</span><span class="p">(</span> <span class="s1">&#39;a-b-c&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>O valor de <code>novo_objeto.membro</code> será <code>a-b-c</code>.</p>

<h3>No prototype</h3>

<p>Esta técnica é utilizada para adicionar <em>métodos</em> públicos. Quando um membro é procurado dentro do próprio objeto e não é encontrado, ele é retirado do protótipo do Construtor do objeto. O mecânismo do <em>prototype</em> é usado para herança. O que também conserva a memória. Para adicionar um método para todos os objetos criados a partir do Construtor, adicione uma função ao protótipo do Construtor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Adicionar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stamp</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">string</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">+</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Então, podemos chamar o método:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">novo_objeto</span><span class="p">.</span><span class="nx">stamp</span><span class="p">(</span> <span class="s1">&#39;-d-e-f&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>E o resultado será: <code>a-b-c-d-e-f</code>.</p>

<h2>Membros Privados</h2>

<p>Membros privados são criados pelo construtor. Variáveis comuns e parâmetros do <em>Construtor</em> se tornam membros privados.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Container</span> <span class="p">(</span> <span class="nx">param</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">=</span> <span class="nx">param</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">limite</span>  <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">that</span>    <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este construtor criou três variáveis privadas: <code>param</code>, <code>limite</code> e <code>that</code>. Elas estão anexadas ao objeto, mas não estão acessíveis fora, nem são acessíveis aos métodos públicos do objeto. Elas estão acessíveis aos métodos privados. Métodos privados são funções internas do <em>Construtor</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Container</span> <span class="p">(</span> <span class="nx">param</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">=</span> <span class="nx">param</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">limite</span>  <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">that</span>    <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">resgata</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nx">limite</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">!==</span> <span class="k">typeof</span> <span class="nx">that</span><span class="p">.</span><span class="nx">membro</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Por convenção, nós declaramos a variável <code>that</code> privada. Isso é usado para tornar o objeto disponível para os métodos privados, pois ao usar o <code>this</code> dentro da função ele apontará para o <code>this</code> dela mesma e não para o <code>this</code> do <em>Construtor</em>.</p>

<p>Métodos privados não podem ser invocados por métodos públicos. Para fazer os métodos privados utilizáveis, nós precisamos fazer com que ele tenha privilégios.</p>

<h2>Membros Privilegiados</h2>

<p>Um método privilegiado tem permissão para acessar variáveis e métodos privados, e é acessível por métodos públicos e externos. É possível deletar ou sobrescrever um método privilegiado, mas não é possível alterá-lo e nem forçá-lo a exibir seu conteúdo.</p>

<p>Métodos privilegiados são atribuídos com <code>this</code> dentro do <em>Construtor</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Container</span> <span class="p">(</span> <span class="nx">param</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">=</span> <span class="nx">param</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">limite</span>  <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">that</span>    <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">resgata</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nx">limite</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">escreve</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">resgata</span><span class="p">()</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Então temos o método privilegiado <code>escreve</code> que acessa os valores definidos dentro do <em>Construtor</em>, porém não pode alterá-los. \o/</p>

<p>Isso só é possível porque existem as <em>Closures</em> no Javascript.</p>

<h2>Closures</h2>

<p>Os padrões de membros <code>public</code>, <code>private</code> e <code>privileged</code> só se tornam possíveis pelo fato da linguagem Javascript possuir <em>Closures</em>.</p>

<p>Isso quer dizer que uma função interna sempre tem acesso as variáveis e parâmetros da função externa, mesmo depois de ela já ter executado.
Essa é uma propriedade muito poderosa da linguagem Javascript!</p>

<p>Métodos privados e privilegiados só podem ser atribuídos enquanto o objeto está sendo construído, já os públicos podem ser adicionados a qualquer momento.</p>

<h2>Padrões utilizando Closures</h2>

<h3>Membros Públicos</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Construtor</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">membro</span> <span class="o">=</span> <span class="nx">valor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Construtor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">membro</span> <span class="o">=</span> <span class="nx">valor</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Membros Privados</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Construtor</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">nome</span> <span class="o">=</span> <span class="nx">valor</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">nome</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observação: a instrução da função</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">nome</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>é uma abreviação para:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">nome</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">nome</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Membros Privilegiados</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Construtor</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nome</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Referência:</p>

<ul>
<li><strong> Douglas Crockford </strong>: <a href="http://javascript.crockford.com/private.html">http://javascript.crockford.com/private.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes Em Javascript]]></title>
    <link href="http://jsenv.com/blog/2015/02/24/classes-em-javascript/"/>
    <updated>2015-02-24T03:01:27+00:00</updated>
    <id>http://jsenv.com/blog/2015/02/24/classes-em-javascript</id>
    <content type="html"><![CDATA[<p>Quando comecei a desenvolver em JavaScript um dos primeiros conflitos que tive com a linguagem foi o famoso caso das classes, na faculdade eu havia aprendido os conceitos de orientação a objeto e aplicado esses conhecimentos somente nas linguagens Java e C#, de início foi difícil compreender esse mundo novo do JavaScript, afinal tanto em Java como em C# não se tem os protótipos, por este motivo quis escrever este post, para aqueles que estão iniciando possam  compreender melhor o funcionamento da linguagem , mas vamos por partes, para compreender classes em JavaScript primeiro é necessário compreender o que é protótipos.</p>

<!-- more -->


<h2>Protótipos</h2>

<p>Todo objeto em JavaScript tem um segundo objeto, este segundo objeto é chamado de protótipo, e o primeiro sempre herda as propriedades deste protótipo. Todos os objetos criados com a palavra-chave <code>new</code> utilizam a função construtora como protótipo, exemplo:</p>

<figure class='code'><figcaption><span>criando objeto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//criando objeto e herdando de Date.prototype</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="c1">//utilizando método do objeto new Date() que foi herdada pelo objeto data</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">getDate</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>O objeto data herda as propriedades de <code>Date.prototype</code> e de <code>Object.prototype</code>, essa série de encadeamento nos chamamos de encandeamento de protótipos.</p>

<h2>Criando classes em JavaScript</h2>

<p>A maneira como se é criada classes em JavaScript é diferente da maneira como é feita em Java, as classes em JavaScript são baseadas em cima do mecanismo de  protótipos, primeiro é necessário criar uma função que se tem o nome de construtora e através dela  é possível se realizar a herança de propriedades para o objeto que vai herdar, segue o código abaixo tanto em JavaScript como em Java para que você possa comparar as diferenças.</p>

<figure class='code'><figcaption><span>exemplo classe pessoa java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//classe em Java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pessoa</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//atributos    </span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">nome</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">idade</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//construtor</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Pessoa</span><span class="o">(</span><span class="n">String</span> <span class="n">nome</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idade</span><span class="o">){</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">nome</span> <span class="o">=</span> <span class="n">nome</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">idade</span> <span class="o">=</span> <span class="n">idade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">//metodos</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">falar</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Meu nome é &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">nome</span> <span class="o">+</span> <span class="s">&quot; e minha idade é &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">idade</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">andar</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">nome</span> <span class="o">+</span> <span class="s">&quot; esta andando&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">Pessoa</span> <span class="n">meuObjeto</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Pessoa</span><span class="o">(</span><span class="s">&quot;Rodrigo&quot;</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span><span class='line'>      <span class="n">meuObjeto</span><span class="o">.</span><span class="na">andar</span><span class="o">();</span>
</span><span class='line'>      <span class="n">meuObjeto</span><span class="o">.</span><span class="na">falar</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>exemplo classe pessoa javascript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//funçao construtora</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Pessoa</span> <span class="p">(</span><span class="nx">nome</span><span class="p">,</span> <span class="nx">idade</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nome</span> <span class="o">=</span> <span class="nx">nome</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">idade</span> <span class="o">=</span> <span class="nx">idade</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Pessoa</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">falar</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;meu nome e &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">nome</span> <span class="o">+</span> <span class="s1">&#39; minha idade e &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">idade</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">andar</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">nome</span> <span class="o">+</span><span class="s1">&#39; esta andando&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A maneira como lidamos, como instanciamos e utilizamos os métodos em JavaScript são os mesmos de linguagem Java.</p>

<figure class='code'><figcaption><span>exemplo criando objeto em javascript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//criando objeto em JavaScript</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">meuObjeto</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pessoa</span><span class="p">(</span><span class="s1">&#39;Rodrigo&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
</span><span class='line'><span class="c1">//invocando os metodos</span>
</span><span class='line'><span class="nx">meuObjeto</span><span class="p">.</span><span class="nx">falar</span><span class="p">();</span>
</span><span class='line'><span class="nx">meuObjeto</span><span class="p">.</span><span class="nx">idade</span><span class="p">();</span>  
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como Sincronizar Um Fork Com Seu Repositório Original]]></title>
    <link href="http://jsenv.com/blog/2015/02/23/como-sincronizar-um-fork-com-seu-repositorio-original/"/>
    <updated>2015-02-23T18:06:17+00:00</updated>
    <id>http://jsenv.com/blog/2015/02/23/como-sincronizar-um-fork-com-seu-repositorio-original</id>
    <content type="html"><![CDATA[<p>Estamos acostumados a dar um fork em repositórios que contém scripts, aplicações e frameworks para utilizarmos no nosso dia-a-dia, facilitando a criação de nossas aplicações.</p>

<p>Mas, e se o repositório original do qual fizemos o fork se atualizar? Como faremos para sincronizar nosso fork com o repositório original?</p>

<!-- more -->


<p>Vamos entender e resolver estas questões!</p>

<h3>Configurando um relacionamento entre seu fork e o repositório original</h3>

<p>Para podermos sincronizar as alterações do repositório original com o seu fork, precisamos seguir os seguintes passos:</p>

<p>1 - Abra o <em>terminal</em> (para usuários Mac e Linux) ou a linha de comando (para usuários Windows).</p>

<p>2 - Liste o repositório corrente configurado no seu fork.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote -v
</span><span class='line'>origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
</span><span class='line'>origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span></code></pre></td></tr></table></div></figure>


<p>3 - Especifique uma ligação para o repositório que será sincronizado ao seu fork.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span></code></pre></td></tr></table></div></figure>


<p>4 - Verifique a nova ligação que você especificou para o seu fork.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote -v
</span><span class='line'>origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
</span><span class='line'>origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
</span><span class='line'>upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
</span><span class='line'>upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</span></code></pre></td></tr></table></div></figure>


<p>Agora que executamos a configuração para sincronizar o fork com o repositório, vamos para a próxima etapa!</p>

<h3>Sincronizando o fork</h3>

<p>Para deixar seu fork sempre atualizado em relação ao reposiório original, siga os passos abaixo:</p>

<p>1 - Abra o <em>terminal</em> (para usuários Mac e Linux) ou a linha de comando (para usuários Windows).</p>

<p>2 - Vá até o diretório do seu projeto (fork)</p>

<p>3 - Busque as <em>branches</em> e seus respectivos <em>commits</em> do repositório. Os <em>commits</em> feitos na branch <em>master</em> serão armazenadas na branch local: <em>upstream/master</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch upstream
</span><span class='line'>remote: Counting objects: 75, done.
</span><span class='line'>remote: Compressing objects: 100% (53/53), done.
</span><span class='line'>remote: Total 62 (delta 27), reused 44 (delta 9)
</span><span class='line'>Unpacking objects: 100% (62/62), done.
</span><span class='line'>From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
</span><span class='line'> * [new branch]      master     -&gt; upstream/master</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>4 - Certifique-se de que está na branch <em>master</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master
</span><span class='line'>Switched to branch 'master'</span></code></pre></td></tr></table></div></figure>


<p>5 - Faça um <em>merge</em> das suas alterações armazenadas em <em>upstream/master</em> dentro da sua branch <em>master</em> local. Isso atualizará a branch do seu fork sem perder suas atualizações locais.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git merge upstream/master
</span><span class='line'>Updating a422352..5fdff0f
</span><span class='line'>Fast-forward
</span><span class='line'> README                    |    9 -------
</span><span class='line'> README.md                 |    7 ++++++
</span><span class='line'> 2 files changed, 7 insertions(+), 9 deletions(-)
</span><span class='line'> delete mode 100644 README
</span><span class='line'> create mode 100644 README.md</span></code></pre></td></tr></table></div></figure>


<p>Se sua branch local não conter nenhum <em>commit</em>, o GIT irá realizar um <em>&ldquo;fast-forward&rdquo;</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git merge upstream/master
</span><span class='line'>Updating 34e91da..16c56ad
</span><span class='line'>Fast-forward
</span><span class='line'> README.md                 |    5 +++--
</span><span class='line'> 1 file changed, 3 insertions(+), 2 deletions(-)</span></code></pre></td></tr></table></div></figure>


<p>Pronto! Fork sincronizado e atualizado!</p>

<h4>Referência:</h4>

<ul>
<li><strong>GitHub</strong>: <a href="https://help.github.com/articles/syncing-a-fork/">https://help.github.com/articles/syncing-a-fork/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looping Com Função Anônima Auto-executável]]></title>
    <link href="http://jsenv.com/blog/2015/02/23/looping-com-funcao-anonima-auto-executavel/"/>
    <updated>2015-02-23T16:55:09+00:00</updated>
    <id>http://jsenv.com/blog/2015/02/23/looping-com-funcao-anonima-auto-executavel</id>
    <content type="html"><![CDATA[<p>Javascript em alguns momentos é uma linguagem muito traiçoeira, prega peças que consomem horas de debug e paciência. São os chamados <a href="http://en.wikipedia.org/wiki/Gotcha_%28programming%29">Gotchas</a>, na tradução literal, <em>&ldquo;pegadinhas&rdquo;</em>.</p>

<p>Coisas que pela lógica deveriam funcionar de uma maneira, mas por características de um sistema ou alguma linguagem programação funcionam de maneira inesperada.</p>

<!-- more -->


<p>Esse post se dedica a tratar de um Gotcha muito comum relacionado a  escopo, que provavelmente você já foi pego por ele, caso não, é hora de explodir sua cabeça.</p>

<figure class='code'><figcaption><span>gotcha</span><a href='http://en.wikipedia.org/wiki/Gotcha_%28programming%29#Gotchas_in_JavaScript_programming_language'>Gotcha (programming)]</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
</span><span class='line'> <span class="nx">func</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func</span><span class="p">[</span><span class="mi">2</span><span class="p">]();</span>
</span><span class='line'><span class="nx">func</span><span class="p">[</span><span class="mi">0</span><span class="p">]();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ao executar esse trecho de código nos deparamos com o alert sempre com o valor 3.</p>

<p><strong>Oh God, Help me!</strong></p>

<p>Take it easy boy, vamos entender o que acontece.</p>

<p>O <code>i</code> dentro closure aponta para <code>i</code> global.  Quando chamamos a função <code>func[0]()</code> o <code>i</code> será 3 por que o valor do <code>i</code> global é 3.</p>

<p>Problema semelhante acontece quando colocamos um ajax em um looping, e desejamos usar o índice dentro de seus callbacks. O índice aparece como <code>undefined</code>, veja o exemplo:</p>

<figure class='code'><figcaption><span>ajax dentro de looping</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1028</span><span class="p">,</span><span class="mi">885</span><span class="p">,</span><span class="mi">931</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">users</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://echo.jsontest.com/users/&#39;</span><span class="o">+</span> <span class="nx">users</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">,</span>
</span><span class='line'>        <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">response</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="c1">//undefined</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">response</span> <span class="p">);</span> <span class="c1">// server response</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Isso acontece porque <code>i</code> é global dentro desse escopo, logo o valor dele é 3 e <code>users[i]</code> aparece como <code>undefined</code> pois a posição 3 não existe.</p>

<p>A solução é simples, devemos isolar cada índice, criando um escopo com uma função anônima auto-executável para que o valor do <code>i</code> seja preservado em cada iteração, veja o exemplo:</p>

<figure class='code'><figcaption><span>função anônima auto-executável com looping</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
</span><span class='line'>    <span class="nx">func</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">})(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// Índice do looping sendo passado como parâmetro</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func</span><span class="p">[</span><span class="mi">0</span><span class="p">]();</span> <span class="c1">// alert 0</span>
</span><span class='line'><span class="nx">func</span><span class="p">[</span><span class="mi">1</span><span class="p">]();</span> <span class="c1">// alert 1</span>
</span><span class='line'><span class="nx">func</span><span class="p">[</span><span class="mi">2</span><span class="p">]();</span> <span class="c1">//alert 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemplo usando com ajax:</p>

<figure class='code'><figcaption><span>função anônima auto-executável com looping</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1028</span><span class="p">,</span><span class="mi">885</span><span class="p">,</span><span class="mi">931</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">users</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://echo.jsontest.com/users/&#39;</span><span class="o">+</span> <span class="nx">users</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">,</span>
</span><span class='line'>        <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;json&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// função anônima auto-executável</span>
</span><span class='line'>            <span class="k">return</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">response</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="nx">index</span><span class="p">])</span> <span class="c1">// usuário correto</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">response</span> <span class="p">);</span> <span class="c1">// resposta</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">})(</span><span class="nx">i</span><span class="p">)</span><span class="c1">// Índice do looping sendo passado como parâmetro</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>O Javascript possui vários gotchas. <a href="http://www.codeproject.com/Articles/182416/A-Collection-of-JavaScript-Gotchas">Jonathan Cardy</a> escreveu um post bem completo, sobre vários gotchas do Javascript, vale uma lida.</p>

<p>Já com relação a closures, existe um post no <a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work">stackoverflow</a> detalhando sobre o assunto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Messaging - API HTML 5]]></title>
    <link href="http://jsenv.com/blog/2015/02/20/web-messaging/"/>
    <updated>2015-02-20T19:24:45+00:00</updated>
    <id>http://jsenv.com/blog/2015/02/20/web-messaging</id>
    <content type="html"><![CDATA[<p><em>Web Messaging</em> ou <em>Cross-document Messaging</em> é uma API introduzida nas especificações da HTML 5 que permite a comunicação entre documentos de origens diferentes.</p>

<!-- more -->


<p>Mensagens <em>cross-document</em> permitem que os scritps possam interagir através destes limites, proporcionando um nível de segurança não muito desenvolvido.
Sendo assim, é essencial que o desenvolvedor cheque a origem da mensagem antes de efetuar qualquer manipulação.</p>

<p>A tabela abaixo, esclarece forma simples como funciona a <strong><em>Política de Mesma Origem</em></strong>:</p>

<table>
<thead>
<tr>
<th> <strong>URL</strong>                    </th>
<th style="text-align:center;"> <strong>Mesma origem?</strong> </th>
<th style="text-align:right;"> <strong>Razão</strong>        </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="http://jsenv.com/about">http://jsenv.com/about</a>     </td>
<td style="text-align:center;"> Sim             </td>
<td style="text-align:right;"> mesmo host, protocolo, porta        </td>
</tr>
<tr>
<td> <a href="http://jsenv.com/">http://jsenv.com/</a>          </td>
<td style="text-align:center;"> Sim             </td>
<td style="text-align:right;"> mesmo host, protocolo, porta        </td>
</tr>
<tr>
<td> <a href="https://jsenv.com/">https://jsenv.com/</a>         </td>
<td style="text-align:center;"> Não                </td>
<td style="text-align:right;"> protocolo diferente </td>
</tr>
<tr>
<td> <a href="http://jsenv.com:81">http://jsenv.com:81</a>        </td>
<td style="text-align:center;"> Não                </td>
<td style="text-align:right;"> porta diferente     </td>
</tr>
<tr>
<td> <a href="http://about.jsenv.com">http://about.jsenv.com</a>     </td>
<td style="text-align:center;"> Não                </td>
<td style="text-align:right;"> host diferente      </td>
</tr>
</tbody>
</table>


<h3>window.postMessage(<em>mensagem</em>, <em>destino</em>, <em>[portas]</em>)</h3>

<p>Esta API permite que seja enviadas mensagens de texto simples, porém podemos enviar objetos transformados em String, por exemplo: <strong><em>JSON.stringify()</em></strong> para o envio e <strong><em>JSON.parse()</em></strong> no recebimento.
Confira nos exemplos abaixo:</p>

<figure class='code'><figcaption><span>Conversão de um objeto em string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj_message</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">nome</span><span class="o">:</span> <span class="s1">&#39;JS Env&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">dominio</span><span class="o">:</span> <span class="s1">&#39;jsenv.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">atualizado</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">str_message</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* transformando um objeto em string para envio */</span>
</span><span class='line'><span class="nx">str_message</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span> <span class="nx">obj_message</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Conversão de uma string em objeto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* &quot;{&quot;nome&quot;:&quot;JS Env&quot;,&quot;dominio&quot;:&quot;jsenv.com&quot;,&quot;atualizado&quot;:true}&quot; */</span>
</span><span class='line'><span class="nx">str_message</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="nx">obj_message</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Parâmetros:</h3>

<ul>
<li><strong>mensagem</strong>: é uma string contendo a mensagem.</li>
<li><strong>destino</strong>: é o endereço para onde a mensagem está sendo enviada. Ele pode adotar 3 tipos de valores:

<ul>
<li>uma URL absoluta: <a href="http://www.jsenv.com">http://www.jsenv.com</a></li>
<li>um caractere curinga (*), para receber de qualquer destino.</li>
<li>ou um valor que restringe o destino da mensagem (/), adotando o a política de mesma origem.</li>
</ul>
</li>
<li><strong>portas</strong>   (opcional):    define um array com as portas válidas para o destino da mensagem.</li>
</ul>


<p>As mensagens podem ser enviadas de iframes para o documento que o carrega (parent) e o processo inverso, do documento (parent) para o iframe, conforme exemplo abaixo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* Posta mensagem para o iFrame */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sender</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;iframe&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="nx">sender</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="s1">&#39;{ atualizar: true }&#39;</span><span class="p">,</span> <span class="s1">&#39;http://jsenv.com/&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* Posta a mensagem para o parent do iFrame */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sender</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span>
</span><span class='line'><span class="nx">sender</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="s1">&#39;{ atualizar: true }&#39;</span><span class="p">,</span> <span class="s1">&#39;http://jsenv.com/&#39;</span><span class="p">);</span>   
</span></code></pre></td></tr></table></div></figure>


<h3>Escutando o evento &ldquo;message&rdquo;</h3>

<p>Para receber a mensagem, basta escutarmos o evento padrão da especificação da API Web Messaging: <strong><em>message</em></strong> . Ele deve estar na página que irá manipular a mensagem. Conforme exemplo abaixo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">show_message</span><span class="p">,</span> <span class="kc">false</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">show_message</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">show_message</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>O Evento de mensagem recebido possui os seguintes atributos:</h3>

<ul>
<li><strong>data</strong>:         O conteúdo da mensagem.</li>
<li><strong>origin</strong>:       A origem da mensagem.</li>
<li><strong>source</strong>:       O objeto WindowProxy do destino da mensagem.</li>
<li><strong>ports</strong>:        Retorna um array com as portas enviadas junto da mensagem.</li>
<li><strong>lastEventId</strong>:  Retorna o identificador do último evento.</li>
</ul>


<p>Assim, para visualizar cada atributo citado acima, a função <strong><em>show_message</em></strong> fica:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">show_message</span> <span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">event</span><span class="p">.</span><span class="nx">origin</span> <span class="o">==</span> <span class="s1">&#39;http://jsenv.com&#39;</span> <span class="p">)</span> <span class="p">{</span>       
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Mensagem       =&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;origem         =&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">origin</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;WindowProxy    =&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">source</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Ports          =&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">ports</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;LastEventID    =&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">lastEventId</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Origem de envio não autorizada.&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Referências:</p>

<ul>
<li><strong>Wikipedia:</strong> <a href="http://en.wikipedia.org/wiki/Web_Messaging">http://en.wikipedia.org/wiki/Web_Messaging</a></li>
<li><strong>Livro HTML 5 - Maujor:</strong> <a href="http://livrohtml5.com.br/">http://livrohtml5.com.br/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
